(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{256:function(e,n,t){"use strict";t.r(n);var a=t(0),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"centeos-安装-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#centeos-安装-docker"}},[e._v("#")]),e._v(" centeos 安装 docker")]),e._v(" "),t("p",[e._v("官方教程 "),t("code",[e._v("https://docs.docker.com/engine/install/centos/")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 安装 yum-utils 包\nyum install -y yum-utils\n\n# 添加docker仓库\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo \n# 用阿里云的镜像更快\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\nyum install docker-ce docker-ce-cli containerd.io\n\n")])])]),t("p",[e._v("如果提示 containerd 提示版本过低 "),t("code",[e._v("https://download.docker.com/linux/")]),e._v(" 下载最新版的 containerd.io 和其它的一些 docker 资源")]),e._v(" "),t("p",[e._v("示例下载： "),t("code",[e._v("dnf install -y https://download.docker.com/linux/centos/8/x86_64/stable/Packages/containerd.io-1.3.7-3.1.el8.x86_64.rpm")])]),e._v(" "),t("p",[e._v("centos  重启后 需要重启 docker  "),t("code",[e._v("systemctl start docker.service | service docker start")])]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Is the docker daemon running ：报错解决办法 service docker start")]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[t("p",[e._v("镜像：是由一系列的只读的层构建，每一层对应DockerFile里面的声明构成")])]),e._v(" "),t("li",[t("p",[e._v("容器： 与镜像的唯一区别在于容器的最上面那一层是可读可写的")])]),e._v(" "),t("li",[t("p",[e._v("启动 docker 服务  "),t("code",[e._v("service docker start")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("systemctl restart docker")]),e._v("  重启docker服务,systemctl命令它实际上将 service 和 chkconfig 这两个命令组合到一起")])])]),e._v(" "),t("p",[e._v("当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("docker inspect containerName|containerID")]),e._v(" 查看容器配置信息")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker images")]),e._v(" 查看本机的镜像")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker ps")]),e._v(" 查看容器 "),t("code",[e._v("-a")]),e._v(" 查看所有容器 包括未运行的")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker pull nginx:latest")]),e._v(" 安装 Nginx 镜像：")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker start|stop|restart containerName")]),e._v(" 启动|关闭|重启容器")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker kill -s KILL containerName")]),e._v(" 杀掉一个运行中的容器 并向容器发送一个信号")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker build ./ -t imageName:1.0.0")]),e._v(" 利用 Dockerfile 创建镜像 -t 后，表示打的标签  name:tag 或者 name 格式  "),t("strong",[e._v("tag 不写默认为 latest")])])])]),e._v(" "),t("p",[e._v("基于路径./（当前路径）打包一个镜像，镜像的名字是 imageName ，版本号是1.0.0。会自动寻找Dockerfile来打包出一个镜像")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("docker create --name containerName imageName:tag")]),e._v(" 使用镜像 imageName 创建一个容器 并命名为 containerName")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker run --name containerName -d imageName:tag")]),e._v(" ：创建一个容器,以后台模式启动,并命名为 containerName")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-p 80:80 主机(宿主)端口:容器端口 容器端口默认80\n\n-P 容器内部端口随机映射到主机的端口 【在服务器中一定要加上，否则默认的80端口无法访问】\n\n-d 后台运行容器，并返回容器ID；\n\n-v /data:/data    主机的目录 /data 映射到容器的 /data\n")])])]),t("ul",[t("li",[t("p",[t("code",[e._v("docker rm -f containName containName")]),e._v(" 强制删除一个或多个容器")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("docker image rm imageName:tag | docker rmi imageName:tag")]),e._v(" 强制删除一个或多个容器")])])]),e._v(" "),t("h2",{attrs:{id:"docker-国内镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-国内镜像"}},[e._v("#")]),e._v(" docker 国内镜像")]),e._v(" "),t("h3",{attrs:{id:"命令行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令行"}},[e._v("#")]),e._v(" 命令行")]),e._v(" "),t("p",[e._v("/etc/docker/daemon.json 创建或修改该文件，加如下内容，修改后重启 "),t("code",[e._v("systemctl restart docker.service")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    // 阿里云的账号是需要自己去注册然后生成的\n    "registry-mirrors": [\n      "http://docker.mirrors.ustc.edu.cn",\n      "https://almtd3fa.mirror.aliyuncs.com",\n      "https://3laho3y3.mirror.aliyuncs.com",\n      "http://hub-mirror.c.163.com"\n    ]\n}\n')])])]),t("h3",{attrs:{id:"客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[e._v("#")]),e._v(" 客户端")]),e._v(" "),t("p",[e._v("打开docker桌面端 -> settings -> Docker Engine 添加如下配置")]),e._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 同上")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"insecure-registries"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"registry.docker-cn.com"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"docker.mirrors.ustc.edu.cn"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n")])])]),t("h2",{attrs:{id:"docker-安装-nginx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-安装-nginx"}},[e._v("#")]),e._v(" docker 安装 nginx")]),e._v(" "),t("p",[e._v("方式一：Dockerfile")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# 使用 Nginx 作为镜像\nFROM nginx \n\n# # 将宿主机中的./index.html文件复制进容器里的 /usr/share/nginx/html/index.html(这个地址是固定的)\nCOPY ./index.html /user/share/nginx/html/index.html\n\n# 容器对外暴露的端口\n# 这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务\n# 如果改为 83 也要同步修改 nginx 的默认端口为 83 否则，不会生效\nEXPOSE 80 \n")])])]),t("p",[e._v("方式二：")]),e._v(" "),t("p",[t("code",[e._v("docker run -d --name nginx-a -p 2022:80 -v /home/cicd/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -v /home/cicd/nginx/html:/usr/share/nginx/html -v /home/cicd/nginx/log:/var/log/nginx nginx:latest")])]),e._v(" "),t("p",[e._v("这里一定都要配置  不然可能无法正常访问")]),e._v(" "),t("p",[e._v("default.conf 简单配置")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("server {\n    listen       80;\n    server_name  localhost;\n\n    # location块\n    location / {\n        root   html;\n        index  index.html index.htm;\n    }\n}\n")])])]),t("p",[e._v("html 也要提前创建")]),e._v(" "),t("hr"),e._v(" "),t("h3",{attrs:{id:"宿主机访问虚拟机中的docker容器的服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#宿主机访问虚拟机中的docker容器的服务"}},[e._v("#")]),e._v(" 宿主机访问虚拟机中的docker容器的服务")]),e._v(" "),t("p",[e._v("ifconfig 中的 docker0： 下的 dockerIP； ens33：下的 服务ip")]),e._v(" "),t("p",[e._v("以管理员运行 cmd 执行： "),t("code",[e._v("route -p add dockerIP mask 255.255.0.0 服务IP")]),e._v("  mask 后的掩码，参考 docker0 netmask 后的掩码")]),e._v(" "),t("h3",{attrs:{id:"进入-docker容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入-docker容器"}},[e._v("#")]),e._v(" 进入 docker容器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker exec -it 容器id或容器名称  /bin/bash   【表示进入容器的 /bin/bash 目录,固定这个地址进入，否则会报错】\n\n-i 即使没有附加也保持STDIN（标准输入） 打开,以交互模式运行容器，通常与 -t 同时使用；\n-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n\n容器中无法使用 vim 在容器中执行以下命令\n\napt-get update\n\napt-get install vim\n\n")])])]),t("p",[e._v("退出容器，输入 "),t("code",[e._v("exit")])]),e._v(" "),t("h3",{attrs:{id:"docker-容器群管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-容器群管理"}},[e._v("#")]),e._v(" docker 容器群管理")]),e._v(" "),t("p",[e._v("docker-compose  安装示例 https://docs.docker.com/compose/install/")]),e._v(" "),t("ul",[t("li",[e._v("docker-compose.yml 配置")])]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("version: '3'  # 这里要查看与 docker engin 对应的版本来修改\nservices:                                      # 集合\n  docker_jenkins:\n    user: root                                 # 避免一些权限问题 所以使用了root\n    restart: always                            # 重启方式\n    image: jenkins/jenkins:latest              # 指定服务所使用的镜像\n    container_name: jenkins                    # 容器名称\n    ports:                                     # 对外暴露的端口定义\n      - 8080:8080\n      - 50000:50000\n    volumes:                                   # 卷挂载路径\n      - /home/jenkins/jenkins_home/:/var/jenkins_home  # 映射 Jenkins 在容器中的文件\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /usr/bin/docker:/usr/bin/docker                # 为了可以在容器内使用docker命令\n      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose\n  docker_nginx:\n    restart: always\n    image: nginx\n    container_name: nginx\n    ports:\n      - 8090:80\n      - 80:80\n      - 433:433\n    volumes:\n      - /home/nginx/conf.d/:/etc/nginx/conf.d\n      - /home/webserver/static/jenkins/dist/:/usr/share/nginx/html\n")])])]),t("p",[t("code",[e._v("docker-compose up -d")]),e._v("  后台创建并运行所有容器")]),e._v(" "),t("h2",{attrs:{id:"jenkins-相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jenkins-相关"}},[e._v("#")]),e._v(" jenkins 相关")]),e._v(" "),t("p",[e._v("先下载镜像 "),t("code",[e._v("docker pull jenkins/jenkins")]),e._v("推荐这个库 jenkins/jenkins 官方维护； jenkins/jenkins:lts 表示长期支持")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("创建文件夹 "),t("code",[e._v("mkdir /var/jenkins_home")]),e._v(" 用于映射容器中的文件,也是相当于当前容器的jenkins的安装目录")])]),e._v(" "),t("li",[t("p",[e._v("添加权限 "),t("code",[e._v("chown -R 1000 /var/jenkins_home")]),e._v(" 目录的拥有者为root用户，而容器中jenkins用户的 uid 为 1000")])]),e._v(" "),t("li",[t("p",[e._v("创建和运行容器： "),t("code",[e._v("docker run -d --name containerName -p 2014:8080 -p 2015:50000 -v /var/jenkins_home:/var/jenkins_home jenkins/jenkins:latest")]),e._v("  容器的 8080 和 50000 端口是固定的 映射的 容器地址也是固定的")])])]),e._v(" "),t("p",[e._v("浏览器进入 2014端口 ； 如果是虚拟机， ip是 docker的ip； 有些虚拟机可以直接用，虚拟机的 ip （enp0s3 中的 IP）")]),e._v(" "),t("hr"),e._v(" "),t("ul",[t("li",[t("p",[e._v("jenkins 插件下载慢处理")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("先查找 jenkins 的安装目录下的 default.json 文件 不知道安装目录可以用 "),t("code",[e._v("find / -name default.json")]),e._v(" 查找 一般在 /var/jenkins_home/updates/default.json")])]),e._v(" "),t("li",[t("p",[e._v("替换文件中的内容，可以用命令\n"),t("code",[e._v("sed -i 's/www.google.com/www.baidu.com/g' default.json")]),e._v(" "),t("code",[e._v("sed -i 's/updates.jenkins-ci.org\\/download/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' default.json")])])]),e._v(" "),t("li",[t("p",[e._v("重启 jenkins （ 在浏览器 ip地址后加restart 跳转点击重启 ）")])])])])]),e._v(" "),t("p",[e._v("或者是在页面中点击 插件管理 => 高级 最下面的url 源切换 https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json")]),e._v(" "),t("ul",[t("li",[e._v("下载 jenkins 插件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# docker exec -it jenkins-tutorials bash\n# cd /var/jenkins_home/war/WEB-INF/detached-plugins\n# wget http://ftp.icm.edu.pl/packages/jenkins/plugins/cloudbees-folder/6.9/cloudbees-folder.hpi\n\n注意更换版本,在此查看 http://ftp.icm.edu.pl/packages/jenkins/plugins/cloudbees-folder/latest/cloudbees-folder.hpi\n")])])]),t("h3",{attrs:{id:"配置-github-相关-实现代码更新，自动构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-github-相关-实现代码更新，自动构建"}},[e._v("#")]),e._v(" 配置 github 相关,实现代码更新，自动构建")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("Jenkins 系统配置 启用Hook URL")])]),e._v(" "),t("li",[t("p",[e._v("配置Github项目仓库；进入一个项目仓库，添加 webhook")])]),e._v(" "),t("li",[t("p",[e._v("Jenkins 配置 github")])])]),e._v(" "),t("p",[e._v("具体的操作请网上搜索参考")]),e._v(" "),t("ul",[t("li",[e._v("SSH Publishers 配置")])]),e._v(" "),t("p",[e._v("全局配置：")]),e._v(" "),t("p",[e._v("Passphrase： 远程服务器的密码")]),e._v(" "),t("p",[e._v("Hostname：远程服务器的ip地址")]),e._v(" "),t("p",[e._v("Username： 远程服务器的账号名")]),e._v(" "),t("p",[e._v("Remote Directory：要将文件发送到的远程服务器的目录")]),e._v(" "),t("p",[e._v("构建后操作 -> Send build artifacts over SSH")]),e._v(" "),t("p",[e._v("Source files：源文件地址，地址的目录是相对于jenkins workspace的目录，如果只需要执行命令不需要传输文件的时候，此处可以为空，"),t("strong",[e._v("最好是一个打包后的文件")])]),e._v(" "),t("p",[e._v("插件配置处，配置了具体的地址，这里的 Remote 相关的可以不填")]),e._v(" "),t("p",[e._v("Exec command  在目标机器上执行的命令 要先进入目标文件 如下示例：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cd /home/cicd/nginx/html/\n\ntar -zxvf package.tar.gz\n\nrm -rf package.tar.gz\n")])])]),t("h3",{attrs:{id:"gitee"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gitee"}},[e._v("#")]),e._v(" gitee")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("安装 jenkins")])]),e._v(" "),t("li",[t("p",[e._v("安装插件 gitee")])]),e._v(" "),t("li",[t("p",[e._v("配置 gitee 插件 ；点添加 选择 gitee api 令牌")])])]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("gitee 创建仓库")])]),e._v(" "),t("p",[e._v("webhooks  需要域名或公共 ip")]),e._v(" "),t("p",[e._v("Jenkins 的两个映射文件 /var/jenkins_home  和 /var/jenkins_home_gitee/")]),e._v(" "),t("p",[e._v("Nginx 的映射文件 /home/cicd/nginx/")]),e._v(" "),t("p",[e._v("安装 nodeJs 插件：  在 centos 上安装，再将安装地址 配置到Jenkins中")]),e._v(" "),t("p",[e._v("构建 shell")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install --registry=https://registry.npm.taobao.org\n\nnpm run build\n\ncd dist\n\ntar -zcvf dist.tar.gz *\n\nmv dist.tar.gz ..\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);