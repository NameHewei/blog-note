(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{264:function(t,a,n){"use strict";n.r(a);var s=n(0),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#介绍"}},[t._v("介绍")])]),n("li",[n("a",{attrs:{href:"#安装"}},[t._v("安装")])]),n("li",[n("a",{attrs:{href:"#配置文件"}},[t._v("配置文件")]),n("ul",[n("li",[n("a",{attrs:{href:"#关于-location-的路径映射"}},[t._v("关于 location 的路径映射")])])])]),n("li",[n("a",{attrs:{href:"#反向代理"}},[t._v("反向代理")])]),n("li",[n("a",{attrs:{href:"#负载均衡"}},[t._v("负载均衡")])]),n("li",[n("a",{attrs:{href:"#动静分离"}},[t._v("动静分离")])]),n("li",[n("a",{attrs:{href:"#集群"}},[t._v("集群")])])])]),t._v("\n[toc]"),n("p"),t._v(" "),n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[t._v("Nginx 是介于客户端与服务端的")]),t._v(" "),n("blockquote",[n("p",[t._v("特点：\n1. 稳定性极强, 7*24小时不间断运行\n2. 丰富的配置示例\n3. 占用内存小，并发能力强（50000以上并发）")])]),t._v(" "),n("p",[t._v("tomcat 150个并发")]),t._v(" "),n("h2",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),n("p",[t._v("windows 安装：")]),t._v(" "),n("ul",[n("li",[t._v("下载，解压到任意目录，进入包含 "),n("code",[t._v("Nginx.exe")]),t._v(" 的目录，打开命令窗口，进入到该目录，运行 "),n("code",[t._v("start nginx")])])]),t._v(" "),n("p",[t._v("如果启动失败 可以进入 logs 文件夹中的 error.log 文件产看是否有错误原因")]),t._v(" "),n("p",[t._v("启动成功后在任务管理器可以看到 nginx 的进程")]),t._v(" "),n("ul",[n("li",[t._v("浏览器访问 "),n("code",[t._v("http://127.0.0.1/")]),t._v("  或 "),n("code",[t._v("locahost")])])]),t._v(" "),n("p",[t._v("其它的一些操作")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("nginx -s stop 立即停止nginx,不保存相关信息\n\nnginx -s quit 正常退出nginx,并保存相关信息\n\nnginx -s reload 重启: 改变了配置等\n")])])]),n("hr"),t._v(" "),n("h2",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),n("blockquote",[n("p",[t._v("root 与 alias 的区别:")])]),t._v(" "),n("p",[t._v("主要在于怎么解释 location 后面的 url")]),t._v(" "),n("p",[t._v("root的处理结果是：root路径＋location路径")]),t._v(" "),n("p",[t._v("alias的处理结果是：使用alias路径替换location路径 （注意alias后面视情况是否要用 '/' 结束）")]),t._v(" "),n("p",[t._v("示例： 假设访问地址是 /t/x.html")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location /t/ {\n    root http://www.xx.xx/   \n    # 映射为  http://www.xx.xx/t/x.html\n\n    alias http://www.xx.xx/   \n    # 映射为  http://www.xx.xx/x.html\n}   \n")])])]),n("hr"),t._v(" "),n("ul",[n("li",[n("p",[t._v("一个 server 块中可以有多个 location")])]),t._v(" "),n("li",[n("p",[t._v("更多默认配置和查看新安装的 Nginx 的 nginx.conf 文件")])])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('\n#user  nobody;\nworker_processes  1;\n#pid        logs/nginx.pid;\n\n\n# 以上为全局块 \n# worker_processes 数值越大，Nginx 并发能力越强\n# error_log  错误日志存放的位置\n# pid  一般不用关注  Nginx 运行的标志\n\nevents {\n    worker_connections  1024;\n}\n\n# events块  \n# worker_connections 数值越大，Nginx 并发能力越强（这里的数据值一般是运维人员根据服务器来配置， worker_processes 也是如此）\n\n\n# 以下为http块\n# include 引入一个外部的文件 mime.types 里面放着大量的媒体类型\n\nhttp {\n    include       mime.types;\n    # 这里是默认使用的媒体类型\n    default_type  application/octet-stream;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n    gzip on;\n\n    # 禁止IE使用gzip 以免假死\n    gzip_disable "MSIE [1-6].";\n\n    # 不压缩小于256字节的文件\n    gzip_min_length 256; \n\n    # gzip_vary on;\n    # gzip_proxied any;\n\n    # gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)\n    gzip_comp_level 2;\n    \n    # gzip_buffers 16 8k;\n    # gzip_http_version 1.1;\n\n    # 表示压缩的文件类型\n    # gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n\n\n    # server块\n    # 这里的server块也可以通过 include 方式加载，可将server块独立开来，因为后期主要修改几乎为server块\n    server {\n        # Nginx 监听的端口号\n        listen       80;\n        # Nginx接收请求的的域名\n        server_name  localhost;\n\n        # location块\n        location / {\n            # 重定向到指定地址\n            # proxy_pass http://localhost:2500/page/one;\n            \n            # 将接收到的请求，根据 html  这个地址去查找静态资源\n            root   html;\n            # 默认去上面的路径中查找 index.html 或者 index.htm\n            index  index.html index.htm;\n        }\n    }\n}\n')])])]),n("h3",{attrs:{id:"关于-location-的路径映射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于-location-的路径映射"}},[t._v("#")]),t._v(" 关于 location 的路径映射")]),t._v(" "),n("p",[t._v("优先级：")]),t._v(" "),n("p",[t._v("(location = ) > (location /xxx/xx/x) > (location ^~) > (location ~, ~*) > (location /起始路劲) > (location /)")]),t._v(" "),n("ol",[n("li",[n("code",[t._v("=")]),t._v(" 匹配")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location = / {\n    # 精准匹配 主机域名后面不能带任何的字符串\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("通用匹配")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location /xxx {\n    # 匹配所有以 /xxx 开头的路径\n}\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("正则匹配")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~/xxx {\n    # 匹配所有以 /xxx 开头的路径\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[t._v("匹配开头路径")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ^~/xxx {\n    # 匹配所有以 /xxx 开头的路径\n}\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[t._v("匹配结尾")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location ~* \\.(gif|jpg)$ {\n    # 匹配所有以 .gif 或 .jpg 结尾的路径\n}\n")])])]),n("h2",{attrs:{id:"反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理")]),t._v(" "),n("p",[t._v("正向代理:")]),t._v(" "),n("ol",[n("li",[t._v("代理服务器是由客户端设立的")]),t._v(" "),n("li",[t._v("客户端了解代理服务器和目标服务器是谁")]),t._v(" "),n("li",[t._v("帮助实现突破访问权限、提高访问速度、对目标服务器隐藏客户端的ip")])]),t._v(" "),n("p",[t._v("反向代理:")]),t._v(" "),n("ol",[n("li",[t._v("反向代理服务器放在服务端")]),t._v(" "),n("li",[t._v("客户端不知道访问的是哪一台服务器")]),t._v(" "),n("li",[t._v("达到负载均衡，并且可以隐藏服务器的真正ip")])]),t._v(" "),n("h2",{attrs:{id:"负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),n("p",[t._v("根据相应的算法决定请求是发给哪个服务器")]),t._v(" "),n("p",[t._v("处理策略：")]),t._v(" "),n("ol",[n("li",[t._v("轮询\n轮流给每一个服务器派发 客户端的请求，平均分配")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("upstream myServer {\n    # server ip:port;\n    server localhost:2500;\n    server localhost:1112;\n}\nserver {\n    location / {\n        proxy_pass http://myServer;\n    }\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("权重\n根据具体的服务器的处理能力，派发客户端的请求")])]),t._v(" "),n("p",[t._v("只需加上 weight")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("upstream myServer {\n    server localhost:2500 weight=10;\n    server localhost:1112 weight=2;\n}\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[t._v("ip_hash\n对请求ip 进行相关的处理，然后请求指定的服务器，如果ip 不变，请求的服务器将一直不变")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("upstream myServer {\n    ip_hash;\n    # 下面是否加权重与 ip_hash无关\n    server localhost:2500 weight=10;\n    server localhost:1112 weight=2;\n}\n")])])]),n("h2",{attrs:{id:"动静分离"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动静分离"}},[t._v("#")]),t._v(" 动静分离")]),t._v(" "),n("p",[t._v("动态资源 静态资源 分离")]),t._v(" "),n("p",[t._v("动态资源交给服务器，静态资源自己处理")]),t._v(" "),n("p",[t._v("Nginx 并发能力公式： "),n("code",[t._v("worker_processes * worker_connections / (4 | 2)")]),t._v(" = 最终并发能力")]),t._v(" "),n("p",[t._v("动态资源除以4（因为多了请求服务器数据和接收服务器数据），静态资源除以2")]),t._v(" "),n("ol",[n("li",[t._v("动态资源代理")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location / {\n    proxy_pass  url;\n}\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("静态资源代理")])]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("location / {\n    root 静态资源路径;\n    index  默认访问路径下的什么资源;\n    autoindex on; # 表示展示静态资源全部内容 以列表的形式\n}\n\n# 存在目录 /static/static 和 /static/image \n# 以下配置生效\nlocation /static {\n    root static;\n    index index.html;\n}\n\nlocation /image {\n    root static;\n    autoindex on;\n}\n")])])]),n("h2",{attrs:{id:"集群"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集群"}},[t._v("#")]),t._v(" 集群")]),t._v(" "),n("p",[t._v("搭建集群后，使用Nginx做反向代理服务器")])])}),[],!1,null,null,null);a.default=e.exports}}]);